--- a/numpy/distutils/ccompiler.py
+++ b/numpy/distutils/ccompiler.py
@@ -292,13 +292,15 @@
             display.append("Fortran %s compiler: %s" % (fc, ' '.join(fcomp)))
         display = '\n'.join(display)
     else:
-        ccomp = self.compiler_so
-        display = "C compiler: %s\n" % (' '.join(ccomp),)
+        ccomp = os.environ.get('CC')
+        display = "C compiler: %s\n" % (ccomp)
     log.info(display)
     macros, objects, extra_postargs, pp_opts, build = \
             self._setup_compile(output_dir, macros, include_dirs, sources,
                                 depends, extra_postargs)
-    cc_args = self._get_cc_args(pp_opts, debug, extra_preargs)
+    cc_argstring = os.environ.get('CFLAGS')
+    cc_argstring = cc_argstring.strip('\"')
+    cc_args = list(cc_argstring.split(" "))
     display = "compile options: '%s'" % (' '.join(cc_args))
     if extra_postargs:
         display += "\nextra options: '%s'" % (' '.join(extra_postargs))

--- a/numpy/distutils/system_info.py
+++ b/numpy/distutils/system_info.py
@@ -295,29 +295,35 @@
             add_system_root(os.path.join(conda_dir, 'Library'))
 
 else:
-    default_lib_dirs = libpaths(['/usr/local/lib', '/opt/lib', '/usr/lib',
-                                 '/opt/local/lib', '/sw/lib'], platform_bits)
+#    default_lib_dirs = libpaths(['/usr/local/lib', '/opt/lib', '/usr/lib',
+#                                 '/opt/local/lib', '/sw/lib'], platform_bits)
     default_runtime_dirs = []
-    default_include_dirs = ['/usr/local/include',
-                            '/opt/include', '/usr/include',
+#    default_include_dirs = ['/usr/local/include',
+#                            '/opt/include', '/usr/include',
                             # path of umfpack under macports
-                            '/opt/local/include/ufsparse',
-                            '/opt/local/include', '/sw/include',
-                            '/usr/include/suitesparse']
-    default_src_dirs = ['.', '/usr/local/src', '/opt/src', '/sw/src']
-
-    default_x11_lib_dirs = libpaths(['/usr/X11R6/lib', '/usr/X11/lib',
-                                     '/usr/lib'], platform_bits)
-    default_x11_include_dirs = ['/usr/X11R6/include', '/usr/X11/include',
-                                '/usr/include']
-
-    if os.path.exists('/usr/lib/X11'):
-        globbed_x11_dir = glob('/usr/lib/*/libX11.so')
-        if globbed_x11_dir:
-            x11_so_dir = os.path.split(globbed_x11_dir[0])[0]
-            default_x11_lib_dirs.extend([x11_so_dir, '/usr/lib/X11'])
-            default_x11_include_dirs.extend(['/usr/lib/X11/include',
-                                             '/usr/include/X11'])
+#                            '/opt/local/include/ufsparse',
+#                            '/opt/local/include', '/sw/include',
+#                            '/usr/include/suitesparse']
+#    default_src_dirs = ['.', '/usr/local/src', '/opt/src', '/sw/src']
+    default_src_dirs = []
+
+#    default_x11_lib_dirs = libpaths(['/usr/X11R6/lib', '/usr/X11/lib',
+#                                     '/usr/lib'], platform_bits)
+#    default_x11_include_dirs = ['/usr/X11R6/include', '/usr/X11/include',
+#                                '/usr/include']
+
+#    if os.path.exists('/usr/lib/X11'):
+#        globbed_x11_dir = glob('/usr/lib/*/libX11.so')
+#        if globbed_x11_dir:
+#            x11_so_dir = os.path.split(globbed_x11_dir[0])[0]
+#            default_x11_lib_dirs.extend([x11_so_dir, '/usr/lib/X11'])
+#            default_x11_include_dirs.extend(['/usr/lib/X11/include',
+#                                             '/usr/include/X11'])
+
+    prefix = os.environ.get('PYTHONXCPREFIX')
+    default_lib_dirs = [os.path.join(prefix, "lib")]
+    default_include_dirs = [os.path.join(prefix, "include"),
+                            os.path.join(prefix, "include/python3.7")]
 
     with open(os.devnull, 'w') as tmp:
         try:
@@ -335,10 +341,10 @@
                 default_lib_dirs += [os.path.join("/usr/lib/", triplet)]
 
 
-if os.path.join(sys.prefix, 'lib') not in default_lib_dirs:
-    default_lib_dirs.insert(0, os.path.join(sys.prefix, 'lib'))
-    default_include_dirs.append(os.path.join(sys.prefix, 'include'))
-    default_src_dirs.append(os.path.join(sys.prefix, 'src'))
+#if os.path.join(sys.prefix, 'lib') not in default_lib_dirs:
+#    default_lib_dirs.insert(0, os.path.join(sys.prefix, 'lib'))
+#    default_include_dirs.append(os.path.join(sys.prefix, 'include'))
+#    default_src_dirs.append(os.path.join(sys.prefix, 'src'))
 
 default_lib_dirs = [_m for _m in default_lib_dirs if os.path.isdir(_m)]
 default_runtime_dirs = [_m for _m in default_runtime_dirs if os.path.isdir(_m)]
